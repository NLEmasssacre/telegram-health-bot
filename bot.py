import os
import logging
import json
import requests
from datetime import datetime, time
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Constants
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', 8080))
CHANNEL_ID = '@notonlypoke'

# OpenRouter API configuration
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "anthropic/claude-3-opus-20240229"

async def generate_post():
    """Generate a post using OpenRouter API"""
    if not OPENROUTER_API_KEY:
        logger.error("OPENROUTER_API_KEY is not set in environment variables")
        return None

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/NLEmasssacre/telegram-health-bot",  # Required by OpenRouter
        "X-Title": "Telegram Health Bot"  # Required by OpenRouter
    }
    
    prompt = """–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –æ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏. 
    –¢–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å: –ó–û–ñ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π, –∏—Å—Ç–æ—Ä–∏—è–º–∏ —É—Å–ø–µ—Ö–∞, 
    –ø–æ–ª–µ–∑–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏, –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.
    –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 2000 —Å–∏–º–≤–æ–ª–æ–≤."""
    
    data = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."},
            {"role": "user", "content": prompt}
        ]
    }
    
    try:
        logger.info("Sending request to OpenRouter API...")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        logger.info("Successfully received response from OpenRouter API")
        return result['choices'][0]['message']['content']
    except requests.exceptions.RequestException as e:
        logger.error(f"Error generating post: {str(e)}")
        if hasattr(e.response, 'text'):
            logger.error(f"Response text: {e.response.text}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error generating post: {str(e)}")
        return None

async def send_post(context: ContextTypes.DEFAULT_TYPE):
    """Send generated post to the channel"""
    try:
        post = await generate_post()
        if post:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=post)
            logger.info("Post successfully sent to channel")
        else:
            logger.error("Failed to generate post")
            await context.bot.send_message(chat_id=CHANNEL_ID, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error sending post: {e}")
        await context.bot.send_message(chat_id=CHANNEL_ID, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def newpost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /newpost command"""
    await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–æ—Å—Ç...")
    await send_post(context)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command"""
    status_text = "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
    status_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')}"
    await update.message.reply_text(status_text)

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /log command"""
    try:
        with open('bot.log', 'r') as f:
            logs = f.readlines()[-50:]  # Get last 50 lines
        log_text = "".join(logs)
        await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n```\n{log_text}\n```", parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")

def main():
    """Start the bot"""
    # Create the Application
    application = Application.builder().token(BOT_TOKEN).build()

    # Add command handlers
    application.add_handler(CommandHandler("newpost", newpost))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("log", log))

    # Set up scheduler for daily posts
    scheduler = AsyncIOScheduler()
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    # Create a context for the scheduler
    async def scheduled_job():
        context = ContextTypes.DEFAULT_TYPE()
        context.bot = application.bot
        await send_post(context)
    
    scheduler.add_job(scheduled_job, 'cron', hour=10, minute=0, timezone=moscow_tz)
    scheduler.start()

    # Get the webhook URL from environment
    webhook_url = os.getenv('WEBHOOK_URL')
    if not webhook_url:
        logger.error("WEBHOOK_URL environment variable is not set")
        return

    # Start the webhook
    application.run_webhook(
        listen='0.0.0.0',
        port=PORT,
        webhook_url=webhook_url,
        cert=None,  # No SSL certificate needed as Render provides HTTPS
        key=None,   # No SSL key needed as Render provides HTTPS
    )

if __name__ == '__main__':
    main() 