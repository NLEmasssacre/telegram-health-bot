import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
from content_generator import ContentGenerator

load_dotenv()

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=os.getenv("BOT_TOKEN"))
        self.dp = Dispatcher()
        self.channel_id = os.getenv("CHANNEL_ID")
        self.content_generator = ContentGenerator()
        
        # Register command handlers
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_newpost, Command("newpost"))

    async def cmd_start(self, message: types.Message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª @notonlypoke.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/newpost - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç"
        )

    async def cmd_newpost(self, message: types.Message):
        await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–æ—Å—Ç...")
        try:
            topic, content = await self.content_generator.generate_full_post()
            post_text = f"üìå {topic}\n\n{content}"
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=post_text
            )
            await message.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
        except Exception as e:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}")

    async def publish_scheduled_post(self):
        try:
            topic, content = await self.content_generator.generate_full_post()
            post_text = f"üìå {topic}\n\n{content}"
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=post_text
            )
            return True
        except Exception as e:
            print(f"Error publishing scheduled post: {str(e)}")
            return False

    async def start(self):
        await self.dp.start_polling(self.bot) 